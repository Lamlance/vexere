import { parseArgs } from "util";
import ChiTietElement from "../ChiTiet/ChiTiet.js";

const Don = [
  {
    Name: "Sapa",
    Sub: [
      "VƒÉn Ph√≤ng Sapa",
      "Th·ªã tr·∫•n Sapa",
      "B·∫øn xe Sapa",
      "Tr·∫°m d·ª´ng ngh·ªâ C·ªëc San",
      "Khu bi·ªát th·ª± nghƒ© d∆∞·ª°ng SapaJade Hills",
      "Th·∫°ch S∆°n",
      "ƒêi·ªán bi√™n ph·ªß",
      "ƒêi·ªán m√°y xanh",
      "06 V∆∞·ªùn Treo",
      "VƒÉn Ph√≤ng M∆∞·ªùng Hoa"
    ]
  }
]
const Tra = [
  {
    Name: "S√≥c S∆°n",
    Sub: [
      "Ga N·ªôi ƒê·ªãa",
      "VƒÉn ph√≤ng N·ªôi B√†i",
      "Ng√£ ba Kim Anh",
      "Ga qu·ªëc t·∫ø",
      "Ng√£ t∆∞ N·ªôi B√†i",
      "S√¢n bay N·ªôi B√†i",
      "B√£i ƒë·ªó xe c·∫£ng N·ªôi ƒê·ªãa"
    ]
  },
  {
    Name: "C·∫ßu gi·∫•y",
    Sub: [
      "VƒÉn Ph√≤ng 7 Ph·∫°m VƒÉn ƒê·ªìng",
      "120 Tr·∫ßn Qu·ªëc Ho√†n",
      "ƒê·∫°i H·ªçc Ngo·∫°i Ng·ªØ H√† N·ªôi",
      "C·ªïng Big C ThƒÉng Long",
      "ƒê·∫°i h·ªçc Ngo·∫°i Ng·ªØ"
    ]
  },
  {
    Name: "Ho√†n Ki·∫øm",
    Sub: [
      "VƒÉn Ph√≤ng 114 Tr·∫ßn Nh·∫≠t Lu·∫≠t",
      "160 Tr·∫ßn Quang Kh·∫£i",
      "Kh√°c s·∫°n khu v·ª±c Ph·ªë C·ªï",
      "VƒÉn Ph√≤ng H√† N·ªôi",
      "Ng√£ t·ª± Ph·ªë V·ªçng",
      "Qu·∫≠n Ho√†n Ki·∫øm",
      "Ph·ªë c·ªï H√† N·ªôi",
      "05 H√†ng Mu·ªëi"
    ]
  }
]
const NhaXe = [
  "B·∫£o Y·∫øn",
  "Dream Transport Limousine",
  "Daily Limousine",
  "ƒê·ª©c Minh Travel",
  "Fancipan Express Bus",
  "G80 Open Tour",
  "Green Bus",
  "H√† S∆°n (H√† Tƒ©nh - Sapa)"
]
const LoaiXe = [
  "Limousine",
  "Gi∆∞·ªùng n·∫±m",
  "Gh·∫ø ng·ªìi"
]
const SoCho = [
  12,
  40,
  22,
  30
]
const TuyenGio = [
  {
    from:"22:28",
    to:"3:43"
  },
  {
    from:"22:28",
    to:"4:28"
  },
  {
    from:"23:00",
    to:"5:00"
  },
  {
    from:"23:30",
    to:"4:20"
  },
  {
    from:"13:30",
    to:"19:20"
  },
  {
    from:"12:30",
    to:"18:20"
  }
]

const searchResultDisplay = document.getElementById("search_result_display");
const deatailTemplate = <HTMLTemplateElement>document.getElementById("chi-tiet-template");
console.log(searchResultDisplay, deatailTemplate);


Array<number>(15).fill(0).forEach(() => {
  searchResultDisplay?.appendChild(new ChiTietElement(deatailTemplate));
});


//Label gi√° v√© (price label)
function priceLabelFunction() {
  const priceLabel = <HTMLSpanElement>document.querySelector("#price-label");
  const minPriceSlider = <HTMLInputElement>document.querySelector(".range-input > #min-price-slider");
  const maxPriceSlider = <HTMLInputElement>document.querySelector(".range-input > #max-price-slider");

  const updatePriceLabel = () => {
    console.log("Bang");
    const minPrice = minPriceSlider.valueAsNumber.toLocaleString("en-US", { style: "currency", currency: "VND" });
    const maxPrice = maxPriceSlider.valueAsNumber.toLocaleString("en-US", { style: "currency", currency: "VND" });

    priceLabel.innerText = `Gi√° t·ª´ ${minPrice} VND t·ªõi ${maxPrice} VND`;
  }

  if (!(priceLabel && minPriceSlider && maxPriceSlider)) {
    return;
  }

  minPriceSlider.addEventListener("input", updatePriceLabel);
  maxPriceSlider.addEventListener("input", updatePriceLabel);

  updatePriceLabel();
}
priceLabelFunction();


interface CheckBoxInterface {
  Name: string,
  Sub: string[]
}
class TwoLevelCheckBox extends HTMLElement {
  private displayChild = false;
  private checkBoxData: CheckBoxInterface;

  constructor(CheckBoxData: CheckBoxInterface) {
    super();
    this.checkBoxData = CheckBoxData;
    this.attachShadow({ mode: "open" });

    let template = <HTMLTemplateElement>document.getElementById("two-level-checkbox-template");

    if (!template) {
      return
    }

    const styleLinkElem = document.createElement("link");
    styleLinkElem.setAttribute("rel", "stylesheet");
    styleLinkElem.setAttribute("href", "/css/Search.css");

    let templateContent = template.content;
    this.shadowRoot?.appendChild(styleLinkElem);
    this.shadowRoot?.appendChild(templateContent.cloneNode(true))

    const parentSpan = <HTMLSpanElement>this.shadowRoot?.querySelector(".js-parent-container > .js-parent-name");
    parentSpan.innerText = this.checkBoxData.Name;

    this.createChild();

    const parentInput = <HTMLInputElement>this.shadowRoot?.querySelector(".js-parent-container > input[type=checkbox]");
    parentInput.oninput = (ev) => {
      const checkStatus = parentInput.checked;
      const allChildLi = <NodeListOf<HTMLInputElement>>this.shadowRoot?.querySelectorAll(".js-child-ul > li > label > input");
      allChildLi.forEach((li) => {
        li.checked = checkStatus
      });
    }
  }

  createChild() {
    const openChild = <HTMLSpanElement>this.shadowRoot?.querySelector(".js-parent-open");
    const childUl = <HTMLUListElement>this.shadowRoot?.querySelector(".js-child-ul");
    childUl.style.display = "none";

    openChild.onclick = (ev) => {
      openChild.innerText = (this.displayChild) ? `‚ñ∂Ô∏è` : `üîΩ`;
      const display = (this.displayChild) ? "none" : "";
      childUl.style.display = display;
      this.displayChild = !this.displayChild;
    }

    this.checkBoxData.Sub.forEach((item) => {
      const li = document.createElement("li");
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "checkbox";

      label.appendChild(input);
      label.innerHTML += item;

      li.appendChild(label);

      childUl?.appendChild(li);
    })
  }
}

customElements.define("two-level-checkbox", TwoLevelCheckBox);
function DiemDonCheckBoxes() {
  const formCheckBoxes = document.getElementById("from-check-boxes");

  Don.forEach((item) => {
    const new2LvlCheckBox = new TwoLevelCheckBox(item);
    formCheckBoxes?.appendChild(new2LvlCheckBox);
  });
}
DiemDonCheckBoxes();

function DiemTraCheckBoxes() {
  const toCheckBox = document.getElementById('to-check-boxes');
  Tra.forEach((item) => {
    const new2LvlCheckBox = new TwoLevelCheckBox(item);
    toCheckBox?.appendChild(new2LvlCheckBox);
  })
}
DiemTraCheckBoxes();

function PopulateSearchResult(){
  const allResult = <NodeListOf<HTMLElement>> document.querySelectorAll("#search_result_display > chi-tiet-element");
  allResult.forEach((result)=>{
    if(result.shadowRoot){
      const name = <HTMLHtmlElement> result.shadowRoot.querySelector(".js-bus-house-name");
      name.innerText = NhaXe[Math.floor(Math.random() * NhaXe.length)];

      const type = <HTMLSpanElement> result.shadowRoot.querySelector(".js-bus-type");
      type.innerText = LoaiXe[Math.floor(Math.random() * LoaiXe.length)];

      const seatAmount = <HTMLSpanElement> result.shadowRoot.querySelector(".js-seat-amount");
      const seats = SoCho[Math.floor(Math.random() * SoCho.length)];
      seatAmount.innerText = `${seats.toFixed(0)} ch·ªó`;

      const fromTime = <HTMLHtmlElement> result.shadowRoot.querySelector(".js-from-time");
      const toTime = <HTMLHtmlElement> result.shadowRoot.querySelector(".js-to-time");
      const randTime = TuyenGio[Math.floor(Math.random() * TuyenGio.length)];
      fromTime.innerText = randTime.from;
      toTime.innerText = randTime.to;

      const fromLocation = <HTMLParagraphElement> result.shadowRoot.querySelector(".js-from-location");
      const toLocation = <HTMLParagraphElement> result.shadowRoot.querySelector(".js-to-location");
      const diemDon = Don[Math.floor(Math.random() * Don.length)];
      const diemTra = Tra[Math.floor(Math.random() * Tra.length)];
      fromLocation.innerText = `${diemDon.Name} - ${diemDon.Sub[Math.floor(Math.random() * diemDon.Sub.length)]}`;
      toLocation.innerText = `${diemTra.Name} - ${diemTra.Sub[Math.floor(Math.random() * diemTra.Sub.length)]}`;

      const emptySeat = <HTMLHtmlElement> result.shadowRoot.querySelector(".js-empty-seat");
      emptySeat.innerText = `${Math.floor(Math.random() * seats) + 1} ch·ªó c√≤n tr·ªëng`
 
    }
  })
}
PopulateSearchResult();

function AdjustEmptySeat(){
  const buttons = <NodeListOf<HTMLButtonElement>> document.querySelectorAll("#filter_by_empty_seat_action > button");
  const seatValue = <HTMLSpanElement> document.querySelector("#filter_by_empty_seat_action > span");

  buttons.forEach((btn)=>{
    btn.onclick = (ev)=>{
      const change =  Number.parseInt(btn.value) ? Number.parseInt(btn.value) : 0;
      const currVal = Number.parseInt(seatValue.innerText);
      console.log(currVal);
      const newVal = (isNaN(currVal) || (currVal + change) < 0 || (currVal + change) >= 20) ? currVal : (Number.parseInt(seatValue.innerText) + change);
      seatValue.innerText = newVal.toFixed(0);
    }
  });

  console.log(buttons);
}
AdjustEmptySeat();